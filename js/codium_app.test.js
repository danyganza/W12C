function loginsucess(response){
    cookies.set(`token`,response[`data`][`token`])
    window[`location`]=`/pages/home.html`;
}

function loginfailure(error){
    let formexample = document.querySelector(`.form`);
    formexample.insertAdjacentHTML(`beforeend`, `<p>sorry, incorrect email or password</p>`);
};

function submit_click(details){
    let email_input= document.querySelector(`.submit`);
    let email_value= email_input[`value`];
    let password_input= document.querySelector(`.input`);
    let password_value= password_input[`value`];
    let login_button = document.querySelector(`.btn`);
    login_button.addEventListener(`click`, submit_click);

    axios.request({
        url: `https://reqres.in/api/login`,
        method: `POST`,
        data: {
            email: email_value,
            password: password_value
        }
    }).then(loginsucess).catch(loginfailure);
}









// Generated by CodiumAI




/*
Code Analysis

Objective:
The objective of the function is to handle the submission of a login form, retrieve the email and password values, send a POST request to a specified API endpoint using axios, and then either redirect the user to the home page upon successful login or display an error message if the login fails.

Inputs:
- details: not used in the function
- email_input: the input field for the user's email address
- password_input: the input field for the user's password

Flow:
1. Retrieve the email and password values from the input fields
2. Add an event listener to the login button that triggers the submit_click function
3. Send a POST request to the specified API endpoint using axios, passing in the email and password values as data
4. If the login is successful, call the loginsuccess function and set a cookie with the token value from the response, then redirect the user to the home page
5. If the login fails, call the loginfailure function and display an error message to the user

Outputs:
- Redirect to the home page upon successful login
- Display an error message if the login fails

Additional aspects:
- The function uses axios to send a POST request to an API endpoint
- The loginsuccess and loginfailure functions are defined outside of the submit_click function and are passed as callbacks to the axios request
- The function sets a cookie with the token value from the response upon successful login
*/



describe('submit_click_function', () => {

    // Tests that a successful login with valid email and password triggers loginsuccess function
    it("test_successful_login", () => {
        const response = {
            data: {
                token: "123456789"
            }
        };
        const axiosMock = jest.spyOn(axios, 'request').mockResolvedValue(response);
        const cookiesMock = jest.spyOn(cookies, 'set');
        const locationMock = jest.spyOn(window.location, 'assign');
        const emailInput = document.createElement('input');
        emailInput.classList.add('submit');
        emailInput.value = 'test@test.com';
        const passwordInput = document.createElement('input');
        passwordInput.classList.add('input');
        passwordInput.value = 'password';
        const loginButton = document.createElement('button');
        loginButton.classList.add('btn');
        const formExample = document.createElement('form');
        formExample.appendChild(emailInput);
        formExample.appendChild(passwordInput);
        formExample.appendChild(loginButton);
        document.body.appendChild(formExample);

        submit_click();

        expect(axiosMock).toHaveBeenCalledWith({
            url: `https://reqres.in/api/login`,
            method: `POST`,
            data: {
                email: 'test@test.com',
                password: 'password'
            }
        });
        expect(cookiesMock).toHaveBeenCalledWith('token', '123456789');
        expect(locationMock).toHaveBeenCalledWith('/pages/home.html');
    });

    // Tests that loginfailure function is called when email and password fields are empty
    it("test_empty_fields", () => {
        const axiosMock = jest.spyOn(axios, 'request');
        const cookiesMock = jest.spyOn(cookies, 'set');
        const locationMock = jest.spyOn(window.location, 'assign');
        const emailInput = document.createElement('input');
        emailInput.classList.add('submit');
        emailInput.value = '';
        const passwordInput = document.createElement('input');
        passwordInput.classList.add('input');
        passwordInput.value = '';
        const loginButton = document.createElement('button');
        loginButton.classList.add('btn');
        const formExample = document.createElement('form');
        formExample.appendChild(emailInput);
        formExample.appendChild(passwordInput);
        formExample.appendChild(loginButton);
        document.body.appendChild(formExample);

        submit_click();

        expect(axiosMock).not.toHaveBeenCalled();
        expect(cookiesMock).not.toHaveBeenCalled();
        expect(locationMock).not.toHaveBeenCalled();
        expect(formExample.querySelector('p')).toBeTruthy();
    });

    // Tests that loginfailure function is called when email field has an invalid format
    it("test_invalid_email_format", () => {
        const axiosMock = jest.spyOn(axios, 'request');
        const cookiesMock = jest.spyOn(cookies, 'set');
        const locationMock = jest.spyOn(window.location, 'assign');
        const emailInput = document.createElement('input');
        emailInput.classList.add('submit');
        emailInput.value = 'invalidemail';
        const passwordInput = document.createElement('input');
        passwordInput.classList.add('input');
        passwordInput.value = 'password';
        const loginButton = document.createElement('button');
        loginButton.classList.add('btn');
        const formExample = document.createElement('form');
        formExample.appendChild(emailInput);
        formExample.appendChild(passwordInput);
        formExample.appendChild(loginButton);
        document.body.appendChild(formExample);

        submit_click();

        expect(axiosMock).not.toHaveBeenCalled();
        expect(cookiesMock).not.toHaveBeenCalled();
        expect(locationMock).not.toHaveBeenCalled();
        expect(formExample.querySelector('p')).toBeTruthy();
    });

    // Tests that loginfailure function is called when password is incorrect
    it("test_incorrect_password", () => {
        const error = {
            response: {
                status: 400
            }
        };
        const axiosMock = jest.spyOn(axios, 'request').mockRejectedValue(error);
        const cookiesMock = jest.spyOn(cookies, 'set');
        const locationMock = jest.spyOn(window.location, 'assign');
        const emailInput = document.createElement('input');
        emailInput.classList.add('submit');
        emailInput.value = 'test@test.com';
        const passwordInput = document.createElement('input');
        passwordInput.classList.add('input');
        passwordInput.value = 'wrongpassword';
        const loginButton = document.createElement('button');
        loginButton.classList.add('btn');
        const formExample = document.createElement('form');
        formExample.appendChild(emailInput);
        formExample.appendChild(passwordInput);
        formExample.appendChild(loginButton);
        document.body.appendChild(formExample);

        submit_click();

        expect(axiosMock).toHaveBeenCalledWith({
            url: `https://reqres.in/api/login`,
            method: `POST`,
            data: {
                email: 'test@test.com',
                password: 'wrongpassword'
            }
        });
        expect(cookiesMock).not.toHaveBeenCalled();
        expect(locationMock).not.toHaveBeenCalled();
        expect(formExample.querySelector('p')).toBeTruthy();
    });

    // Tests that loginfailure function is called when server returns an error response
    it("test_server_error", () => {
        const error = {
            response: {
                status: 500
            }
        };
        const axiosMock = jest.spyOn(axios, 'request').mockRejectedValue(error);
        const cookiesMock = jest.spyOn(cookies, 'set');
        const locationMock = jest.spyOn(window.location, 'assign');
        const emailInput = document.createElement('input');
        emailInput.classList.add('submit');
        emailInput.value = 'test@test.com';
        const passwordInput = document.createElement('input');
        passwordInput.classList.add('input');
        passwordInput.value = 'password';
        const loginButton = document.createElement('button');
        loginButton.classList.add('btn');
        const formExample = document.createElement('form');
        formExample.appendChild(emailInput);
        formExample.appendChild(passwordInput);
        formExample.appendChild(loginButton);
        document.body.appendChild(formExample);

        submit_click();

        expect(axiosMock).toHaveBeenCalledWith({
            url: `https://reqres.in/api/login`,
            method: `POST`,
            data: {
                email: 'test@test.com',
                password: 'password'
            }
        });
        expect(cookiesMock).not.toHaveBeenCalled();
        expect(locationMock).not.toHaveBeenCalled();
        expect(formExample.querySelector('p')).toBeTruthy();
    });

    // Tests that login button has a click event listener
    it("test_button_click_listener", () => {
        const loginButton = document.createElement('button');
        loginButton.classList.add('btn');
        const formExample = document.createElement('form');
        formExample.appendChild(loginButton);
        document.body.appendChild(formExample);

        submit_click();

        expect(loginButton.onclick).toBeTruthy();
    });
});
